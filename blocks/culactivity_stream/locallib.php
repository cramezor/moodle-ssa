<?php

// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Helper functions for CUL Activity Stream 
 *
 * @package    block
 * @subpackage culactivity_stream
 * @copyright  2013 Amanda Doughty <amanda.doughty.1@city.ac.uk>
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * 
 */

/**
 *
 * @return array $notifications
 */
function block_culactivity_stream_get_notifications() {
    global $DB, $USER, $COURSE;
    
    // Add pagination/infinite scroll later
    $limitfrom = 0;
    $limitnum = 100;
    
    $where = 'userid = :userid';
    $params = array('userid'=>$USER->id);
    $notifications = array();   
    
    if (!$COURSE->id = SITEID) {
        $where .= ' and courseid = :courseid';
        $params = array('courseid'=>$COURSE->id);
    }
    
    if (!$messages = $DB->get_records_select(
            'message_culactivity_stream', 
            $where, 
            $params, 
            'timecreated DESC', '*', 
            $limitfrom, 
            $limitnum)) {
        
        return $notifications;

    }
        
    foreach ($messages as $message) {
        $notification = new stdClass();
        $notification = json_decode($message->eventdata);
        $lastcourseaccess = round(time() - COURSE_MAX_RECENT_PERIOD, -2); // better db caching for guests - 100 seconds

        if (!isguestuser()) {
            if (!empty($USER->lastcourseaccess[SITEID])) {
                if ($USER->lastcourseaccess[SITEID] > $lastcourseaccess) {
                    $lastcourseaccess = $USER->lastcourseaccess[SITEID];
                }
            }
        }
        
        
        // This was a rubbish idea - Need course info!
      /*  if (isset($notification->contexturl)) {
            if (strpos($notification->contexturl, 'course') === false) {
                $url = new moodle_url($notification->contexturl);
                $cmid = $url->get_param('id');
echo $notification->contexturl;
                $course = $DB->get_record_select(
                                'course_modules',
                                'id = :id',
                                array('id'=>$cmid)
                                );
                $notification->course = $DB->get_record('course', array('id'=>$course->course));
            } else {
                $cid = $url->get_param('id');
                $notification->course = $DB->get_record('course', array('id'=>$cid));
            }
            
        }       
        
        print_r($notification->course);*/
        
        // if this is a notification and we have the course object then
        // get the course image or a default gravatar
        if (isset($notification->course) && isset($notification->notification) 
                && $notification->notification) {
            if (!$notification->img = block_culactivity_stream_get_course_image ($notification->course->id)) {
                $size = 40;
                $email = "{$notification->course->shortname}@somewhere.com";
                $grav_url = "http://www.gravatar.com/avatar/" . md5( strtolower( trim( $email ) ) ) . "?d=monsterid&f=y" . "&s=" . $size;
                $notification->img = $grav_url;  
            }
        // else get the user image
        } else {        
            $notification->img = $notification->userfrom;
        }

        // Use the course icon for notifications generated by our local plugin
        // TODO Not sure about this, may have some custom messages for mods too
        // perhaps icon should be in the eventdata
        if ($notification->component == 'local_culactivity_stream') {
            $notification->icon = 'i/course';
            $notification->component = 'core';
        } else {
            $notification->icon = 'icon';
        }

        
        $timesince = block_culactivity_stream_human_timing($message->timecreated);
        $notification->time = $timesince;
        $notification->new = $message->timecreated > $lastcourseaccess? true : false;
        $notification->contexturlname = 'visit'; // TODO

        $notifications[] = $notification; 
    }

    return $notifications;
}

/**
 * 
 * @param type $time
 * @return type
 */
function block_culactivity_stream_human_timing ($time) {
    
    $time = time() - $time; // to get the time since that moment

    $tokens = array (
        31536000 => 'year',
        2592000 => 'month',
        604800 => 'week',
        86400 => 'day',
        3600 => 'hour',
        60 => 'minute',
        1 => 'second'
    );

    foreach ($tokens as $unit => $text) {
        if ($time < $unit) continue;
        $numberOfUnits = floor($time / $unit);
        return $numberOfUnits.' '.$text.(($numberOfUnits>1)?'s':'');
    }
}


/**
 * 
 * @global type $CFG
 * @global type $DB
 * @param type $courseid
 * @return boolean|string
 */
function block_culactivity_stream_get_course_image ($courseid) {
    global $CFG, $DB;
    
    $myimages = $DB->get_records('files',array('filearea'=>'courseimages'));
    
    foreach ($myimages as $myimage) {
        if ($myimage->filesize == 0 ) {continue;}
        $myurl = $CFG->wwwroot.'/pluginfile.php/'.$myimage->contextid.'/block_course_image/courseimages/'.$myimage->itemid.'/'.$myimage->filename;
        return $myurl;
    }

    return false;
}