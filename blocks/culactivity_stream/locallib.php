<?php

// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Helper functions for CUL Activity Stream 
 *
 * @package    block
 * @subpackage culactivity_stream
 * @copyright  2013 Amanda Doughty <amanda.doughty.1@city.ac.uk>
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * 
 */

require_once($CFG->dirroot.'/course/lib.php');

/**
 * Function to retrieve notifications
 * 
 * @global stdClass $DB
 * @global stdClass $USER
 * @global stdClass $COURSE
 * @param int $limitfrom the limit offset (for pagination and infinite scroll)
 * @param int $limitnum the number of records to retrieve
 * @param int $lastid notification id used to reload the block contents
 * @return array (int $count, array $notifications)
 */
function block_culactivity_stream_get_notifications($limitfrom=0, $limitnum=0, $lastid=0) {
    global $DB, $USER, $COURSE;
    $count = 0;
    $where = 'deleted = 0 and userid = :userid and id > :lastid';
    $params = array('userid'=>$USER->id, 'lastid'=>$lastid);
    $notifications = array();   
   
    // Check if we on the MyMoodle page or in a course.
    // We fetch all notifications on the MyMoodle page but only course specific
    // ones in a course.
    if ($COURSE->id != SITEID) {
        $where .= ' and courseid = :courseid';
        $params['courseid'] = $COURSE->id;
    }
    
    if (!$messages = $DB->get_records_select(
            'message_culactivity_stream', 
            $where, 
            $params, 
            'timecreated DESC, id DESC', '*', 
            $limitfrom, 
            $limitnum)) {
        
        return array( 0, $notifications);
    }

    $count = $DB->count_records_select('message_culactivity_stream', $where, $params);
        
    foreach ($messages as $message) {
        $notification = new stdClass();        
        $notification = json_decode($message->eventdata);
        $notification->id = $message->id;

        // Guests have no lastcourseaccess data, so we set this to 2 days ago
        // so that notifications younger than two days can be set as new
        $lastcourseaccess = round(time() - COURSE_MAX_RECENT_PERIOD, -2); // better db caching for guests - 100 seconds

        if (!isguestuser() && !empty($notification->course)) {

            if (!empty($USER->lastcourseaccess[$notification->course->id])) {
                if ($USER->lastcourseaccess[$notification->course->id] > $lastcourseaccess) {
                    $lastcourseaccess = $USER->lastcourseaccess[$notification->course->id];
                    
                }
            }
        }
        
        // if we have the course object then get the course image or a default 
        // gravatar
        if (isset($notification->course)) {
            if (!$notification->img = block_culactivity_stream_get_course_image ($notification->course->id)) {
                $size = 35;
                $email = "{$notification->course->shortname}@somewhere.com";
                $grav_url = "http://www.gravatar.com/avatar/" . md5( strtolower( trim( $email ) ) ) . "?d=identicon&f=y" . "&s=" . $size;
                $notification->img = $grav_url;  
            }
        // else get the user image
        } else {        
            $notification->img = $notification->userfrom;
        }

        // Use the course icon for notifications generated by our local plugin
        if ($notification->component == 'local_culactivity_stream'
                || $notification->component == 'core') { // TODO need a default image
            $notification->icon = 'i/course';
            $notification->component = 'core';
        } else {
            $notification->icon = 'icon';
        }
        
        $timesince = block_culactivity_stream_human_timing($message->timecreated);
        $notification->time = $timesince;
        $notification->new = $message->timecreated > $lastcourseaccess? true : false;
        $notification->contexturlname = get_string('visit', 'block_culactivity_stream'); 

        $notifications[] = $notification; 
    }

    return array($count, $notifications);
}

/**
 * Function that compares a time stamp to the current time and returns a human
 * readable string saying how long ago the time stamp was
 * 
 * @param int $time unix time stamp
 * @return string representing time since message created
 */
function block_culactivity_stream_human_timing ($time) {
    
    $time = time() - $time; // to get the time since that moment

    $tokens = array (
        31536000 => get_string('year'),
        2592000 => get_string('month'),
        604800 => get_string('week'),
        86400 => get_string('day'),
        3600 => get_string('hour'),
        60 => get_string('minute'),
        1 => get_string('second', 'block_culactivity_stream')
    );

    foreach ($tokens as $unit => $text) {
        if ($time < $unit) continue;
        $numberOfUnits = floor($time / $unit);
        return $numberOfUnits.' '.$text.(($numberOfUnits>1)?'s':'');
    }
}


/**
 * Function to return the image url of a course image
 * 
 * @global stdClass $CFG
 * @global stdClass $DB
 * @param int $courseid a course id
 * @return boolean|string image url if found, false if not
 */
function block_culactivity_stream_get_course_image ($courseid) {
    global $CFG, $DB;
    
    $courseimg = null;
    $selection  = "filesize <> 0 AND itemid = :courseid AND filearea = 'courseimages'";
    $params     = array('courseid' => $courseid);

    if ($files = $DB->get_records_select('files', $selection, $params, 'sortorder', '*', 0, 1)) {
        $file = array_values($files);
        $imgsrc  = $CFG->wwwroot . '/pluginfile.php/' . $file[0]->contextid .
                   '/block_course_image/courseimages/' . $file[0]->itemid .
                   '/' . $file[0]->filename;
        
        return $imgsrc;
    }      

    return false;
}

/**
 * Function to carry out a soft delete of a notification by marking it as 
 * deleted in the message_culactivity_stream table
 * 
 * @global stdClass $DB
 * @param int $remove the notification id
 * @return bool true
 */
function block_culactivity_stream_remove_notification ($remove) {
    global $DB;
    $notification = new stdClass();
    $notification->id = $remove;
    $notification->deleted = 1;
    
    // soft delete
    return $DB->update_record('message_culactivity_stream', $notification);
}